/**
 * Hammer Project
 * Isabella Query Languange
 * JSON-like language for Query Open Data
 *
 * @author mauro.pelucchi@gmail.com
 * @version 1.0
 *
 */options{  JDK_VERSION = "1.8";  static = false;
  /*
  * enable unicode input
  */
  UNICODE_INPUT = true;

  ERROR_REPORTING = false;}PARSER_BEGIN(Isabella)package org.hammer.isabella.cc;


import java.util.ArrayList;
import java.util.SortedMap;
import java.util.TreeMap;

import org.hammer.isabella.query.QueryGraph;
import org.hammer.isabella.query.InstanceNode;
import org.hammer.isabella.query.Edge;
import org.hammer.isabella.query.QuestionEdge;
import org.hammer.isabella.query.IsabellaError;
import org.hammer.isabella.cc.util.IsabellaUtils;
import org.hammer.isabella.cc.util.SemanticUtil;
import org.hammer.isabella.query.AttributeValue;

/**
* Isabella main class 
*/
public class Isabella {

  	private SortedMap<Integer, IsabellaError> errors = new TreeMap<Integer, IsabellaError> ();
	private QueryGraph qG = null;

	public SortedMap<Integer, IsabellaError> getErrors() {		return errors;
	}

}PARSER_END(Isabella)SKIP :{  " "| "\r"| "\t"| "\n"}
TOKEN : /* TERMINAL SYMBOL */
{
  < SELECT : "\"select\"" >
| < FROM : "\"from\"" >
| < WHERE : "\"where\"" >
| < LB: "{">
| < RB: "}">
| < LS: "[">
| < RS: "]">
| < COMMA: ",">
| < COLON: ":" >
| < STAR : "\"*\"" >
| < CONDITION : "\"condition\"" >
| < COLUMN : "\"column\"" >
}



TOKEN  : /* STANDARD LITERALS */
{

  <#LETTER: ["_","a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"] >
//| <EAN: "^8[0-9]{11}([0-9]{2})?$" >
| <#SIGN: ["-","+"]>
| <#EXPONENT: ("E"|"e") (<SIGN>)? (<DIGIT>)+ >


| <NUMBER: (<DIGIT>)+ >
| <FLOATING_NUMBER: (<DIGIT>)* "." (<DIGIT>)* (<EXPONENT>)?
        | (<DIGIT>)+ (<EXPONENT>) >

| <LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
      )*
      "\""
  >

}

SPECIAL_TOKEN :
{
  <COMMENT: ("//" (~["\n","\r"])* ("\n"|"\r"|"\r\n"))  | ("<!--" ( ~["-"] | ( "-" ~["-"] ) )* "-->") >
| <ANYTHING : (~[]) >
}

/********************************************************************************
*  QUERY GRAPH
*/
QueryGraph queryGraph() :
{
  
}
{ 	try {

 	  <LB> qG = queryGraphAttr() <RB><EOF>

	} catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.RB);
	}
	{
	 return qG;
	}
}

/**
* Query Graph attr
*/
QueryGraph queryGraphAttr() :
{
	ArrayList<QuestionEdge> qList = new ArrayList<QuestionEdge>();
	ArrayList<InstanceNode> iList = new ArrayList<InstanceNode>();
	ArrayList<Edge> wList = new ArrayList<Edge>();
}
{
	try {
		(		  qList = select() | iList = from() | wList = where()
		)
		(		  <COMMA>
		  (		    qList = select() | iList = from() | wList = where()
		  )
		)*
	 
	 
	} catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.RS);
	}
	{
	    
		return SemanticUtil.Build(errors, qList, iList, wList);
	}
}


/**
* Select
*/
ArrayList<QuestionEdge> select() :
{
	ArrayList<QuestionEdge> qList = new ArrayList<QuestionEdge>();
	QuestionEdge eN = null;
}
{
	try {

  	<SELECT><COLON>  <LS>
  		(<LB >eN=selectAttr() { qList.add(eN); } <RB>)
        (<COMMA> <LB >eN=selectAttr() { qList.add(eN); } <RB> )*
	 <RS>

	} catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.RS);
	}
	{
		return qList;
	}
	
}

/**
* From attr
*/
ArrayList<InstanceNode> from() :
{
	ArrayList<InstanceNode> iList = new ArrayList<InstanceNode>();
	InstanceNode iN = null;
	
}
{
	try {
		
	 <FROM><COLON>  <LS>
        ( iN=fromAttr() { iList.add(iN);} )
        (<COMMA> iN=fromAttr() { iList.add(iN);})*

	 <RS> 
	 
	} catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.RS);
	}
	{

		return iList;
	}
}


/**
* Where attr
*/
ArrayList<Edge> where() :
{
	ArrayList<Edge> wList = new ArrayList<Edge>();
	Edge wN = null;
}
{
	try {
		
	 
	  <WHERE><COLON>  <LS>
	 (
	 
        (<LB> wN = whereAttr() { if(wN != null) wList.add(wN); } <RB>)
        (<COMMA> <LB> wN = whereAttr() { if(wN != null) wList.add(wN); } <RB> )*
	)*
	<RS>
	 
	 
	} catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.RS);
	}
	{
		return wList;
	}
}

/********************************************************************************
* Select Attr
*
*/
QuestionEdge selectAttr():
{
    SortedMap<String, AttributeValue> sl = new TreeMap<String, AttributeValue>();
}
{
    try {
        <COLUMN> <COLON> <LB>sl = listAttr() <RB>	 
  	 } catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.RB);
  	 }
	 {
	 return SemanticUtil.SetAttrValueSelect(sl, errors, this.token);
	 }
	
}


/********************************************************************************
* From Attr
*
*/
InstanceNode fromAttr():
{
}
{
    try {
      
     	<LITERAL> 
	 
	 } catch (ParseException ex) {
		throw ex;
  	 }
	 {
	 return SemanticUtil.SetAttrValueFrom(errors, this.token);
	 }
	
}

/********************************************************************************
* Where Attr
*
*/
Edge whereAttr():
{
    SortedMap<String, AttributeValue> sl = new TreeMap<String, AttributeValue>();
}
{
    try {
		<CONDITION> <COLON> <LB>sl = listAttr() <RB>
	 } catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.RB);
  	 }
	 {
	 return SemanticUtil.SetAttrValueWhere(sl, errors, this.token);
	 }
	
}



/********************************************************************************
* Lista Attr
*
*/
SortedMap<String, AttributeValue> listAttr() :
{
    SortedMap<String, AttributeValue> sl = new TreeMap<String, AttributeValue>();
    AttributeValue av;
}
{
     try {

       
	     av = attrValue() { if (av.getName() != null) sl.put(av.getName(), av); }
	     	(<COMMA> av = attrValue() { if (av.getName() != null) sl.put(av.getName(), av); } )*

	     	
     } catch (ParseException ex) {
		IsabellaUtils.Recover(this, errors, ex, Isabella.LITERAL);
  	 }
	 {
	 return sl;
	 }
}

/**
* Attr value
*/
AttributeValue attrValue() :
{
	Token t = null;
	AttributeValue av = new AttributeValue();
}
{
  try {
    
  		t = <LITERAL> <COLON> { av.setName(t.image.substring(1,t.image.length()-1));}
  		(
  		  	t = <LITERAL> { av.setLiteralValue(t.image.substring(1,t.image.length()-1).replaceAll("\\\"","\"")); }
  		  | t = <NUMBER>  { av.setNumberValue(Integer.parseInt(t.image));}
  		  | t = <FLOATING_NUMBER> { av.setFloatValue(Float.parseFloat(t.image));}
  		)


  		
  } catch (ParseException ex) {
	IsabellaUtils.Recover(this, errors, ex, Isabella.LITERAL);
  }
  {
    av.eval(errors, this.token.beginLine, this.token.beginColumn);
	return av;
  }
}


